* Questions

**** Opener

- Let's go around in order and introduce ourselves. Please state your
  name, your role in the development of Erlang, and whether you're a
  dog person, cat person, or an other person - if other, what?


** Prehistory


*** Lessons learned from AKE/AXE (Ericsson DNA)

- When you started Erlang in 1985, you had some pretty specific
  targets to go after in PLEX. E.g. handling a very large number of
  concurrent activities, soft real time performance, distribution,
  continuous operations, and so on.

  This question may be to Bjarne and Mike, but anyone feel free to
  contribute - what were some fundamental lessons learned from AKE -
  this is the precursor of AXE/PLEX - that were codified in the
  Ericsson engineering mindset in 1985.

  E.g. one observation in Joe's history of Erlang was "The design of
  AXE and PLEX used a mixture of hardware protection and data copying
  that eliminated the use of pointers and corrected many of the errors
  in the AKE."

*** Prior experiences that influenced research into Erlang (Lab DNA)

- Bjarne you had some foramtive experience earlier with Lisp. Ericsson
  had seen great improvements in AXE over AKE. Joe was a physicist and
  had experience with rockets. What are some of the ideas or
  influences that weighed heavily as you set out to find a language to
  improve on PLEX?


** Research and development


*** Solve Ericsson's software problem

- Bjarne, Joe recounts that your marching orders to him were to "solve
  Ericsson's software problem". Could you describe some of those
  problems? What were asking of Joe there?

  - At what point did you start to think he and the others in the Lab
    might actually pull it off?

*** JAM

- Joe, Chuck Moore, creator of Forth, said that "compilers are
  probably the worst code ever written. They are written by someone
  who has never written a compiler before and will never do so again."
  The design of your original abstract machine, the JAM, survives in
  large part as the BEAM today. How the hell did you do that?

  - What advice would you have for programmers who might not think
    they have it in them to create something new?

*** Virdings first rule of programming

- Robert, are you familiar with this "Virding's first rule of
  programming?"

  : Any sufficiently complicated concurrent program in
  : another language contains an ad hoc informally-specified bug-ridden
  : slow implementation of half of Erlang.

  A lot of people might just think you're being clever there. For the
  record, what makes concurrency so hard?

*** A type system

- Philip Wadler enters the ecosystem and works on a type system for
  Erlang. By some measure he fails, but does succeed in creating a
  type specification, which in turn enables dialyzer and other tooling
  that use type information. What makes Erlang resistant to being a
  statically typed language?

  - Does this <quality of Erlang> contribute to your approaches to
    statically vs dynamically typed languages? Robert, I've heard you
    say at times that you're not a type person.

*** Features that never made it

- Joe, Mike, and Robert, in the history of Erlang you experimented
  with new features and users didn't like it, you pulled it. Were
  there any features that any of really really liked, but didn't make
  it into Erlang because some /user/?


** Erlang in the wild


*** Open sourcing Erlang

- Jane, if it wasn't for your involvement in getting Erlang open
  sources, we wouldn't be here today. Could you tell us that story?

  - How close was this decision? Was it an easy sell, or was it a real
    posibility that Erlang would have been kept closed?

*** Difficulty of selling Erlang

- Jane you bring a perspective that is hard to come by in Erlang
  developer circles as you have interface with those who are seeing
  this technology for the first time and being asked to make some
  important strategic decisions in adopting it as a core
  technology. What's been the most challenging part of those
  discussions?

*** Mission accomplished?

- Here's a short list of some companies - you may have heard of some:
  IBM, VISA, Facebook, BT Mobile, Pivotal, WhatsApp - and a telecom
  startup called Ericsson. Each company uses Erlang in variying
  degrees - for some it's a small line of business, for others it's
  core to their business.

  Let me now read off the ten requirements that were outlined going
  into Erlang's research and development. As I read these, I want
  everyone to imagine how each of these requirements potentially fits
  into products they work on or know of.

  1. Handling a very large number of concurrent activities

  2. Actions to be performed at a certain point of time or within a
     certain time

  3. Systems distributed over several computers

  4. Interaction with hardware

  5. Very large software systems

  6. Complex functionality such as feature interaction

  7. Continuous operation over several years

  8. Software maintenance (reconfiguration, etc.) without stopping the
     system

  9. Stringent quality and reliability requirements

  10. Fault tolerance both to hardware failures and software errors

  Super softball question. After 30 years now, looking at how Erlang
  is used, inside Ericsson and outside, are you all comfortable saying
  "missing accopmlished?"

*** Elixir

- Elixir... This is a new language, similar to Erlang semantically but
  with some novel innovations like macros and function call
  piping. Apart from it's kinder and gentler syntax - so some say -
  people are attracted to Elixir's now outstanding toolchain and
  documentation...

  Mix for building, Distillery for deployment, ExUnit for testing,
  getting started guides that focus on developer understanding and
  productivity, extensive language documentation, and a web framework
  that - dare I say it - sort of reminds programmers of a very popular
  web framework for Ruby.

  Driving this community is a small, distributed, ad hocly financed
  team of very talented enthusiasts.

  What can we learn about the effectiveness of community here - and
  how could elements of that model be applied to Erlang's development,
  which is still largely driven by a single organization.


** The future


*** The only people in the world concerned with software failure

- Joe, Robert and Mike, in 1989 at the SETSS conference you trolled
  other presenters relentlessly by asking the question, "what happens
  if it fails?" The answer was "our model assumes it won't". After
  this you realized that you were the only people in the world
  designing systems that could recover from software failures.

  It seems not much has changed. Today, systems are built to guard
  against hardware failures.

  This seems to me the dividing line between Erlang and everything
  else, even today.

  My question is this, why hasn't this idea caught on?

*** What's exciting

- Looking at technology today, what's most exciting to you?

*** Advice to learners

- Advice for a new programmer who wants to work on actual hard
  problems and be excellent at it.
